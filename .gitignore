#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split  

# Directory path where the files are located
directory_path = "your path"

# List of file names (including "cleveland.data")
file_names = [
    'switzerland.data',
    'reprocessed.hungarian.data',
    'processed.hungarian.data',
    'processed.cleveland.data',
    'long-beach-va.data',
    'hungarian.data',
]

# Dictionary to store DataFrames
data_frames = {}

# Read each file into a DataFrame and store it in the dictionary
for file_name in file_names:
    if file_name.endswith('.data'):
        file_path = directory_path + file_name  # Construct the full file path
        with open(file_path, 'r', encoding='ISO-8859-1') as file:
            # Create an empty list to store the rows of data
            data_rows = []
            for line in file:
                # Split the line using one or more spaces as the delimiter
                values = re.split(r'\s+', line.strip())
                data_rows.append(values)
        
        # Create a DataFrame from the list of rows and store it in the dictionary
        df = pd.DataFrame(data_rows)
        data_frames[file_name] = df

# You can access the DataFrames using their file names as keys in the dictionary
# For example, to access the data from 'switzerland.data':
switzerland_data = data_frames['switzerland.data']

# Drop rows with missing values
df.dropna(inplace=True)
# Split data into features (X) and target (y)
X = df.iloc[:, :-1]  # All columns except the last one
y = df.iloc[:, -1]  

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the Random Forest model
rf_classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = rf_classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Generate a classification report
print(classification_report(y_test, y_pred))
